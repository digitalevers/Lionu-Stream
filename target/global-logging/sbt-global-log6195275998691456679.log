[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Administrator\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Administrator\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.2 (Oracle Corporation Java 1.8.0_201)
[debug]       Load.loadUnit: plugins took 99.296481ms
[debug]       Load.loadUnit: defsScala took 0.434179ms
[debug] [Loading] Scanning directory C:\Users\Administrator\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.395686 ms
[debug]           Load.resolveProject(global-plugins) took 43.318098ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Administrator\.sbt\1.0\plugins, plugins: List(<none>))) took 86.833603ms
[debug] [Loading] Done in C:\Users\Administrator\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 109.452952ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.433277ms
[debug]     Load.loadUnit(file:/C:/Users/Administrator/.sbt/1.0/plugins/, ...) took 218.8377ms
[debug]   Load.apply: load took 375.244432ms
[debug]   Load.apply: resolveProjects took 6.932434ms
[debug]   Load.apply: finalTransforms took 61.403362ms
[debug]   Load.apply: config.delegates took 9.434144ms
[debug]   Load.apply: Def.make(settings)... took 964.248627ms
[debug]   Load.apply: structureIndex took 116.938853ms
[debug]   Load.apply: mkStreams took 2.721352ms
[info] loading global plugins from C:\Users\Administrator\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3410.537588ms
[debug]           Load.loadUnit: plugins took 26.331951ms
[debug]           Load.loadUnit: defsScala took 0.003605ms
[debug] [Loading] Scanning directory C:\Users\Administrator\IdeaProjects\zookeeper\project
[debug]             Load.loadUnit: mkEval took 10.229187ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\IdeaProjects\zookeeper\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.629446 ms
[info] loading settings for project zookeeper-build from idea.sbt ...
[debug]               Load.resolveProject(zookeeper-build) took 4.619119ms
[debug]             Load.loadTransitive: finalizeProject(Project(id zookeeper-build, base: C:\Users\Administrator\IdeaProjects\zookeeper\project, plugins: List(<none>))) took 7.022274ms
[debug] [Loading] Done in C:\Users\Administrator\IdeaProjects\zookeeper\project, returning: (zookeeper-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2409.832686ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.000453ms
[debug]         Load.loadUnit(file:/C:/Users/Administrator/IdeaProjects/zookeeper/project/, ...) took 2441.371476ms
[debug]       Load.apply: load took 2442.518067ms
[debug]       Load.apply: resolveProjects took 0.115981ms
[debug]       Load.apply: finalTransforms took 12.612511ms
[debug]       Load.apply: config.delegates took 0.645409ms
[debug]       Load.apply: Def.make(settings)... took 80.822409ms
[debug]       Load.apply: structureIndex took 38.187279ms
[debug]       Load.apply: mkStreams took 0.002404ms
[info] loading project definition from C:\Users\Administrator\IdeaProjects\zookeeper\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4775.774581ms
[debug]     Load.loadUnit: defsScala took 0.005408ms
[debug] [Loading] Scanning directory C:\Users\Administrator\IdeaProjects\zookeeper
[debug]       Load.loadUnit: mkEval took 0.260808ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\IdeaProjects\zookeeper, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.81957 ms
[info] loading settings for project zookeeper from build.sbt ...
[debug]         Load.resolveProject(zookeeper) took 49.069987ms
[debug]       Load.loadTransitive: finalizeProject(Project(id zookeeper, base: C:\Users\Administrator\IdeaProjects\zookeeper, plugins: List(<none>))) took 54.372373ms
[debug] [Loading] Done in C:\Users\Administrator\IdeaProjects\zookeeper, returning: (zookeeper)
[debug]     Load.loadUnit: loadedProjectsRaw took 1318.784696ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.477081ms
[debug]   Load.loadUnit(file:/C:/Users/Administrator/IdeaProjects/zookeeper/, ...) took 6130.345805ms
[debug] Load.apply: load took 6131.769429ms
[debug] Load.apply: resolveProjects took 0.112976ms
[debug] Load.apply: finalTransforms took 32.652328ms
[debug] Load.apply: config.delegates took 0.308282ms
[debug] Load.apply: Def.make(settings)... took 59.672958ms
[debug] Load.apply: structureIndex took 25.195575ms
[debug] Load.apply: mkStreams took 0.002404ms
[info] set current project to zookeeper (in build file:/C:/Users/Administrator/IdeaProjects/zookeeper/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52040 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52040, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to zookeeper (in build file:/C:/Users/Administrator/IdeaProjects/zookeeper/)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[warn] build source files have changed
[warn] modified files: 
[warn]   C:\Users\Administrator\IdeaProjects\zookeeper\build.sbt
[warn] Apply these changes by running `reload`.
[warn] Automatically reload the build when source changes are detected by setting `Global / onChangedBuildSource := ReloadOnSourceChanges`.
[warn] Disable this warning by setting `Global / onChangedBuildSource := IgnoreSourceChanges`.
[debug] > Exec(idea-shell, None, None)
